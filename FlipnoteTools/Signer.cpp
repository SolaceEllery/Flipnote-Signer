#include <iostream>
#include <rsa.h>
#include <base64.h>
#include <hex.h>
#include <osrng.h.>
#include <files.h>
#include <cassert>

CryptoPP::byte key_array[] = { 0x30, 0x82, 0x04, 0xA4, 0x02, 0x01, 0x00, 0x02, 0x82, 0x01, 0x01, 0x00, 0xBA, 0xFF, 0xB3, 0x1C, 0x05, 0xD7, 0xBD, 0xB6, 0xED, 0x46, 0xAC, 0x40, 0x0C, 0x37, 0x89, 0x02, 0xB5, 0xF6, 0x6F, 0xD4, 0x4C, 0xC6, 0x3D, 0xD3, 0xFA, 0xAA, 0x51, 0x83, 0x71, 0x67, 0x20, 0x4F, 0xE3, 0x79, 0x4D, 0xED, 0x8F, 0xB7, 0xA8, 0x0F, 0x3B, 0x0C, 0x76, 0xE6, 0x3E, 0x0F, 0xF5, 0x13, 0xF4, 0x24, 0xA7, 0x3F, 0xE4, 0x07, 0x61, 0x8F, 0xEF, 0x7F, 0x49, 0xF9, 0x96, 0xA5, 0xFD, 0xB3, 0xA9, 0x63, 0xA1, 0x90, 0x26, 0xC9, 0x4B, 0xAB, 0xBB, 0x28, 0xF5, 0x7B, 0x90, 0x60, 0xF9, 0xF9, 0x03, 0x12, 0xEF, 0xF2, 0x3C, 0x43, 0xD0, 0x8E, 0xA8, 0x5B, 0xCB, 0x2C, 0x02, 0xC9, 0x82, 0xF8, 0x4C, 0x40, 0x0E, 0x26, 0xF7, 0xA8, 0xA5, 0x40, 0x71, 0xF5, 0xF7, 0x50, 0xC5, 0x42, 0x7A, 0x27, 0x82, 0x79, 0xA0, 0x21, 0x3F, 0x22, 0x6D, 0x64, 0x16, 0xB9, 0x46, 0x5B, 0xEA, 0x6E, 0x01, 0x18, 0x87, 0x9A, 0xDD, 0xE6, 0x99, 0x4C, 0x8D, 0xCC, 0xEF, 0x1B, 0x23, 0xF2, 0x71, 0xDD, 0xC1, 0x92, 0x7E, 0x83, 0x87, 0x24, 0x6D, 0x5F, 0xA0, 0x46, 0x90, 0xB0, 0x8E, 0x5A, 0x68, 0xAA, 0x80, 0xA4, 0x1A, 0xB1, 0xB7, 0x3B, 0xF0, 0xA8, 0xC8, 0x6E, 0x75, 0xC6, 0x6D, 0x01, 0x64, 0xB2, 0x44, 0xC0, 0x4C, 0x96, 0x77, 0x6F, 0x91, 0x19, 0xD5, 0x4C, 0x33, 0x53, 0x7D, 0x35, 0xCB, 0x39, 0x87, 0x47, 0x4A, 0x10, 0x88, 0x82, 0x72, 0x94, 0x2C, 0x24, 0xC7, 0xF3, 0xBB, 0x8B, 0x04, 0x83, 0xFF, 0x9E, 0xC9, 0xAB, 0xE3, 0xF6, 0xE7, 0x43, 0x3F, 0x2A, 0xDA, 0xBA, 0x7F, 0x1F, 0x25, 0x4E, 0xFB, 0x4C, 0xA3, 0x47, 0xA9, 0x95, 0xAF, 0x43, 0x57, 0xE4, 0x03, 0xC9, 0x43, 0xEE, 0xAB, 0x88, 0x99, 0x86, 0x83, 0x7B, 0x77, 0x54, 0xE9, 0x5D, 0x84, 0xA3, 0xFB, 0x69, 0x31, 0xC3, 0x51, 0x6F, 0xA1, 0x91, 0x02, 0x03, 0x01, 0x00, 0x01, 0x02, 0x82, 0x01, 0x00, 0x42, 0x02, 0x4C, 0xD9, 0x51, 0x7E, 0xAC, 0x6B, 0x4C, 0x2A, 0xAC, 0x57, 0x17, 0x78, 0xEB, 0x16, 0x57, 0xE1, 0x1B, 0xEC, 0x97, 0x05, 0x4B, 0x81, 0xEE, 0x73, 0xFC, 0xBE, 0x27, 0x63, 0xBD, 0xD6, 0x35, 0x77, 0xF6, 0x78, 0x2B, 0x49, 0x2B, 0x3B, 0xE5, 0x1E, 0x2B, 0x42, 0x6F, 0x19, 0xF6, 0xEB, 0x0A, 0x3D, 0x7E, 0x04, 0x61, 0x9B, 0xF1, 0x66, 0x7B, 0xA6, 0x35, 0x18, 0xB3, 0x82, 0xF8, 0xA1, 0x58, 0xE3, 0xE0, 0x7E, 0x20, 0x12, 0xE2, 0x71, 0x46, 0x69, 0xD8, 0xED, 0xBB, 0x33, 0x60, 0x49, 0xF4, 0x39, 0xD5, 0x15, 0x6F, 0x0C, 0x89, 0x2C, 0x32, 0x65, 0xE4, 0xBC, 0x2E, 0x67, 0xAF, 0xA1, 0xB2, 0x58, 0xD2, 0x26, 0x13, 0x3A, 0x26, 0xCB, 0x2E, 0xEF, 0x22, 0x54, 0x12, 0xAD, 0xBA, 0xAD, 0x03, 0xB3, 0xA7, 0x40, 0xD5, 0x26, 0x73, 0xF2, 0xE6, 0xCA, 0x93, 0xF9, 0x92, 0x31, 0x2E, 0x95, 0x3D, 0x5C, 0xA6, 0x20, 0xFA, 0xC0, 0xE6, 0x30, 0xCC, 0x0C, 0x58, 0x9D, 0x15, 0xF0, 0x82, 0xE5, 0xF4, 0xD6, 0x74, 0x07, 0x45, 0x12, 0xB7, 0x9D, 0x6B, 0xAF, 0x97, 0xB3, 0x11, 0x68, 0x4A, 0xEF, 0x2B, 0x90, 0x0E, 0xE2, 0xAA, 0x35, 0xF2, 0xD6, 0x24, 0x18, 0x4E, 0xED, 0xC8, 0x6C, 0x35, 0xA4, 0x53, 0xDA, 0xFC, 0xF7, 0xF8, 0x86, 0x3E, 0x2B, 0x43, 0x22, 0x52, 0xA0, 0x8C, 0xC4, 0x94, 0xBE, 0xF1, 0xEC, 0xC8, 0x8C, 0x51, 0xC8, 0xC4, 0x3D, 0xFF, 0x55, 0x4A, 0x2A, 0x90, 0xF0, 0x39, 0x84, 0xEA, 0x37, 0xD1, 0xF7, 0xB5, 0xDF, 0x8E, 0x83, 0x2B, 0x0E, 0x5D, 0x86, 0x1E, 0xFC, 0x42, 0x1D, 0xC5, 0xCC, 0x2D, 0xF8, 0xEE, 0xEB, 0x77, 0x43, 0x3D, 0xB3, 0x01, 0xFF, 0x25, 0x9F, 0xBA, 0x1B, 0x70, 0xDC, 0xDB, 0x11, 0x7E, 0xB1, 0x8B, 0xB1, 0x0A, 0x4E, 0x97, 0x2C, 0x08, 0xEF, 0xF9, 0x19, 0x02, 0x81, 0x81, 0x00, 0xE8, 0x0C, 0x32, 0x7E, 0x2B, 0x20, 0xE2, 0x8A, 0x06, 0x59, 0x4E, 0x11, 0xE0, 0xA6, 0x3E, 0x5B, 0x87, 0x36, 0x1E, 0x85, 0x37, 0x8F, 0x7D, 0x7F, 0x53, 0xB7, 0x1A, 0xBD, 0xC1, 0x11, 0xF9, 0x12, 0x2E, 0x1D, 0xE8, 0x0D, 0x3C, 0xE0, 0x0F, 0x3D, 0xE8, 0x8B, 0x60, 0x82, 0x86, 0x98, 0x38, 0x3C, 0xE2, 0x5A, 0x2D, 0x5C, 0xC9, 0x16, 0x4F, 0xF5, 0x1A, 0x79, 0xB9, 0x06, 0xA9, 0x12, 0x66, 0xA8, 0x5F, 0x98, 0xE3, 0x3B, 0xB1, 0x46, 0x1B, 0x24, 0x71, 0x2E, 0xBB, 0xC1, 0x62, 0x45, 0x7A, 0x45, 0x32, 0x3B, 0x7B, 0x83, 0x2C, 0x14, 0x3F, 0xA0, 0x5B, 0x78, 0xA8, 0xD7, 0x13, 0x67, 0x35, 0x84, 0x82, 0x82, 0x27, 0x5A, 0xA7, 0xFA, 0xDE, 0xF1, 0x1E, 0x1E, 0xF4, 0x82, 0xB9, 0x5A, 0x52, 0x2A, 0xCF, 0x2B, 0x26, 0xCE, 0x86, 0x43, 0x38, 0x31, 0x4E, 0x2F, 0x71, 0xF9, 0xEA, 0x9B, 0x4F, 0xCB, 0x02, 0x81, 0x81, 0x00, 0xCE, 0x4D, 0x19, 0x2A, 0x0D, 0x85, 0x94, 0x9F, 0xAF, 0x00, 0x98, 0x22, 0xAB, 0x50, 0x99, 0xD4, 0x0F, 0xB5, 0x98, 0xA1, 0x0E, 0x9E, 0x16, 0x84, 0x02, 0x55, 0xF2, 0x9E, 0xA8, 0x0B, 0xA7, 0xF4, 0x78, 0xDB, 0xAA, 0xAD, 0xCB, 0x37, 0x0A, 0x1A, 0x5D, 0x7C, 0xB3, 0xF1, 0xD9, 0xA1, 0x95, 0x86, 0xB2, 0x31, 0xA8, 0x2A, 0xEE, 0xCF, 0x04, 0x29, 0x61, 0x56, 0x59, 0x7F, 0xA2, 0x48, 0xC0, 0x4E, 0xD0, 0x22, 0x25, 0x0D, 0xCE, 0x54, 0x21, 0x59, 0x2E, 0x62, 0xFB, 0x7E, 0xE1, 0xCC, 0x61, 0xA9, 0x22, 0xF9, 0x06, 0xBE, 0xAB, 0xF1, 0x5B, 0x45, 0x12, 0xF2, 0xDD, 0x28, 0xBF, 0x64, 0xB1, 0xF3, 0x81, 0xEE, 0x63, 0x90, 0xC7, 0xA0, 0x93, 0xE0, 0x24, 0x07, 0xC1, 0x2D, 0x95, 0x1B, 0x39, 0xE3, 0x9B, 0x14, 0x7E, 0x22, 0x8D, 0x79, 0x4E, 0x85, 0x99, 0x77, 0x42, 0x72, 0x5B, 0x08, 0x70, 0x93, 0x02, 0x81, 0x81, 0x00, 0xA9, 0x4B, 0xAC, 0xD3, 0x0C, 0x18, 0x33, 0xEF, 0x4B, 0x6E, 0x80, 0x5C, 0xDE, 0xAF, 0xAB, 0x33, 0x0F, 0xD4, 0xD6, 0x33, 0x8F, 0x33, 0xAA, 0xF5, 0xE8, 0x57, 0xE0, 0xB4, 0xAC, 0x55, 0xB6, 0x88, 0x23, 0x09, 0x42, 0xB1, 0xD5, 0xC6, 0x0A, 0x98, 0xBA, 0x3E, 0x65, 0xAD, 0x15, 0x11, 0x9D, 0x86, 0x1E, 0x06, 0x78, 0xAE, 0x07, 0x2F, 0xB6, 0x2A, 0x36, 0xA4, 0xB3, 0xEF, 0x3E, 0x0E, 0xE4, 0xC2, 0xD6, 0xEC, 0x2E, 0x6C, 0xF0, 0x8B, 0x1B, 0x66, 0x5D, 0x05, 0x21, 0x8A, 0x97, 0x6D, 0xE5, 0x24, 0xF2, 0xDF, 0x1E, 0xDF, 0xB6, 0x9B, 0x17, 0x48, 0xA1, 0x33, 0xC8, 0xCB, 0x11, 0xA6, 0xED, 0x0E, 0xBE, 0x40, 0xC3, 0x01, 0x8B, 0x28, 0xA6, 0xDA, 0xF7, 0x84, 0xD2, 0x13, 0x45, 0xB3, 0xB5, 0xDA, 0xF1, 0xC6, 0xA3, 0xCB, 0x6D, 0x7D, 0x41, 0x54, 0x07, 0x9C, 0xE9, 0xE4, 0xD1, 0xDB, 0x7A, 0x3D, 0x02, 0x81, 0x80, 0x40, 0x77, 0xD7, 0x65, 0x4C, 0xD4, 0x71, 0x9D, 0x75, 0x12, 0xBA, 0x78, 0x1B, 0x11, 0x15, 0x01, 0x2F, 0xE7, 0x8F, 0xCA, 0xC4, 0xC6, 0xA2, 0x42, 0x9E, 0x78, 0x3D, 0x59, 0x57, 0x2A, 0x4D, 0x52, 0x18, 0x72, 0x8C, 0xE3, 0xC2, 0x9D, 0x70, 0x8A, 0xCC, 0xAC, 0x2B, 0x8F, 0x68, 0x73, 0x16, 0x47, 0x01, 0x68, 0x83, 0x24, 0xE7, 0x7B, 0xC9, 0xD1, 0x24, 0x99, 0xD7, 0x5E, 0x0B, 0x58, 0xB0, 0xBF, 0xF0, 0x4A, 0xBB, 0x49, 0x95, 0x30, 0xB5, 0x3B, 0x29, 0x43, 0xC5, 0x53, 0xE1, 0x3B, 0xFD, 0x48, 0xDD, 0xA4, 0xF4, 0x76, 0xA1, 0x44, 0xCB, 0x40, 0xCA, 0xAB, 0x1A, 0x71, 0xA1, 0x5D, 0xD6, 0x3E, 0x42, 0x5C, 0x3C, 0xC1, 0x01, 0xA1, 0x2C, 0x94, 0xDE, 0xAD, 0x8D, 0xB0, 0xB0, 0xE7, 0xD1, 0x2F, 0x4F, 0x47, 0x18, 0x23, 0xB4, 0x12, 0x34, 0x77, 0x8B, 0x7D, 0xB9, 0x46, 0x03, 0x2C, 0xA0, 0x01, 0x02, 0x81, 0x81, 0x00, 0xAA, 0x87, 0x5E, 0x2F, 0xE1, 0x6A, 0x89, 0x10, 0x3A, 0x98, 0x13, 0xE9, 0x34, 0x1F, 0x71, 0x74, 0x0A, 0xE6, 0xAE, 0xFF, 0xE7, 0x6E, 0x8C, 0xA2, 0xA2, 0xC4, 0xAF, 0x37, 0x66, 0xF0, 0xB3, 0x0F, 0x53, 0xC2, 0x84, 0x42, 0x58, 0xC5, 0xC9, 0xFF, 0xEF, 0x03, 0x53, 0x0C, 0x5B, 0x14, 0x70, 0xFB, 0xBD, 0xD3, 0x4E, 0xC8, 0xDC, 0x42, 0x40, 0x53, 0x1E, 0x56, 0x60, 0x60, 0x08, 0x24, 0x03, 0x15, 0xB3, 0x2E, 0x69, 0x3F, 0x11, 0x0E, 0xC9, 0xBC, 0x3A, 0xB9, 0x27, 0x4E, 0x24, 0xBA, 0xB6, 0xDD, 0xDE, 0x28, 0x43, 0x37, 0x77, 0x6A, 0x16, 0xA4, 0x5B, 0x39, 0x56, 0xCA, 0xA7, 0x09, 0xF0, 0x95, 0x9B, 0x0A, 0x7A, 0xF9, 0x15, 0xA1, 0x47, 0x4B, 0x2A, 0x93, 0x63, 0x9B, 0x7C, 0x41, 0xCF, 0x80, 0xA3, 0x2A, 0x6F, 0x1D, 0x61, 0xAD, 0x61, 0x75, 0x94, 0xFC, 0x33, 0x74, 0x65, 0xE4, 0x07, 0x50 };

namespace RSA
{
using namespace CryptoPP;
std::string SignString(std::string message)
{
	std::string RSA_PRIV_KEY =
		"-----BEGIN RSA PRIVATE KEY-----\n"
		"MIICXAIBAAKBgQDCPLwTL6oSflv+gjywi/sM0TUB90xqOvuCpjduETjPoN2FwMeb\n"
		"xNjdKIqHUyDu4AvrQ6BDJc6gKUbZ1E27BGZoCPH49zQRb+zAM6M9EjHwQ6BABr0u\n"
		"2TcF7xGg2uQ9MBWz9AfbVQ91NjfrNWo0f7UPmffv1VvixmTk1BCtavZxBwIDAQAB\n"
		"AoGAJqdTfjX0EG4Y/JMKZM/Wi/xuIhAGovVN6/gL+9lthtQqgV2V24fW6FwTBU8j\n"
		"tKXdeVoh4Hr7nZ/ZO6wmM9tyTVSHo37XdF/1bsPM7iu/0M8A6+jJr94l6PYpCP5y\n"
		"apPEj2RR154gTaVK7/J/OePZy6tRlgcI1awsqgCDcvweEsECQQD4KnxSdyJD0Oqa\n"
		"xaIIhLkLZEuvkBmrLG+YQUezVOB60MjMC1DyIiZzc5otkQZ0RiopRm/57a6pXA58\n"
		"1xSN9JiRAkEAyF5uvKCbA9+PORUn668W0N+uRWZ2+WaqC46HkUDnrVEa4FsnLsFD\n"
		"0NlVmH2BXifPUPLMR6WzP+OJ9hKfve78FwJAQQJgLvomb716t7CuEa0zDFjpusP0\n"
		"9XJeiXQQZFoHtCSddVZBjiyEBhpyeR1Uo4D96nIZQ0+QQa1r3ig5qjY5AQJAWvZD\n"
		"324p8YA0TP3FucEq4ngpbWgu6tooqEZ0VQTaKFyBjwjSqO8kElQX/7o6WLxJ6b3P\n"
		"71bSIVby8rtRubAc0QJBAJ1zhk7/d6PA4+J9aQ+jBi/OW+ljiD8yjatLq+4fqRfx\n"
		"YsFzLqmzjxfiiX+6BzuHHcWJzBUmIcPyu+Y2N0BdT7M=\n"
		"-----END RSA PRIVATE KEY-----";

	static std::string HEADER = "-----BEGIN RSA PRIVATE KEY-----";
	static std::string FOOTER = "-----END RSA PRIVATE KEY-----";

	size_t pos1, pos2;
	pos1 = RSA_PRIV_KEY.find(HEADER);
	if (pos1 == std::string::npos)
		throw std::runtime_error("PEM header not found");

	pos2 = RSA_PRIV_KEY.find(FOOTER, pos1 + 1);
	if (pos2 == std::string::npos)
		throw std::runtime_error("PEM footer not found");

	// Start position and length
	pos1 = pos1 + HEADER.length();
	pos2 = pos2 - pos1;
	std::string keystr = RSA_PRIV_KEY.substr(pos1, pos2);


	// Base64 decode, place in a ByteQueue    
	CryptoPP::ByteQueue queue;
	CryptoPP::Base64Decoder decoder;

	decoder.Attach(new CryptoPP::Redirector(queue));
	decoder.Put((const CryptoPP::byte*)keystr.data(), keystr.length());
	decoder.MessageEnd();

	try
	{
		CryptoPP::RSA::PrivateKey rsaPrivate;
		rsaPrivate.BERDecodePrivateKey(queue, false /*paramsPresent*/, queue.MaxRetrievable());

		// BERDecodePrivateKey is a void function. Here's the only check
		// we have regarding the DER bytes consumed.
		assert(queue.IsEmpty());

		CryptoPP::AutoSeededRandomPool prng;
		bool valid = rsaPrivate.Validate(prng, 3);
		if (!valid)
			std::cerr << "RSA private key is not valid" << std::endl;

		/*
		std::cout << "N:" << rsaPrivate.GetModulus() << std::endl;
		std::cout << "E:" << rsaPrivate.GetPublicExponent() << std::endl;
		std::cout << "D:" << rsaPrivate.GetPrivateExponent() << std::endl;
		*/

		AutoSeededRandomPool rng;

		// sign message
		std::string signature;
		RSASS<PKCS1v15, SHA1>::Signer signer(rsaPrivate);

		CryptoPP::StringSource ss(message, true,
			new CryptoPP::SignerFilter(rng, signer,
				new CryptoPP::HexEncoder(
					new CryptoPP::StringSink(signature))));

		return signature;

	}
	catch (const Exception& ex)
	{
		std::cerr << ex.what() << std::endl;
		exit(1);
	}
}
};